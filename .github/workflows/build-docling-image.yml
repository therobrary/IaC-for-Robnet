name: Build Docling Docker Image

on:
  schedule:
    # Check for new releases every day at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no new version'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: docling

jobs:
  check-for-updates:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      latest_tag: ${{ steps.check.outputs.latest_tag }}
    steps:
      - name: Check for new docling releases
        id: check
        run: |
          # Try to get the latest release first
          echo "Checking latest release..."
          LATEST_TAG=$(curl -s https://api.github.com/repos/docling-project/docling/releases/latest | jq -r .tag_name 2>/dev/null || echo "null")
          
          # If no release found, try to get the latest tag
          if [ "$LATEST_TAG" = "null" ] || [ -z "$LATEST_TAG" ]; then
            echo "No release found, checking latest tag..."
            LATEST_TAG=$(curl -s https://api.github.com/repos/docling-project/docling/tags | jq -r '.[0].name' 2>/dev/null || echo "null")
          fi
          
          # Final validation
          if [ "$LATEST_TAG" = "null" ] || [ -z "$LATEST_TAG" ]; then
            echo "Error: Could not fetch latest version from docling repository"
            echo "This might be due to API rate limits or network issues"
            exit 1
          fi
          
          echo "Latest docling version: $LATEST_TAG"
          
          # Check if we already have this version built by checking the GitHub Container Registry
          echo "Checking if image already exists..."
          PACKAGE_EXISTS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/${{ env.IMAGE_NAME }}/versions" \
            2>/dev/null | jq -r --arg tag "$LATEST_TAG" '.[] | select(.metadata.container.tags[]? == $tag) | .name' | head -1 || echo "")
          
          if [ -n "$PACKAGE_EXISTS" ]; then
            echo "Image for $LATEST_TAG already exists (package: $PACKAGE_EXISTS)"
            if [ "${{ github.event.inputs.force_build }}" = "true" ]; then
              echo "Force build requested, will rebuild"
              echo "should_build=true" >> $GITHUB_OUTPUT
            else
              echo "Skipping build for existing version"
              echo "should_build=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "New version $LATEST_TAG detected, will build"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi
          
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

  build-and-push:
    needs: check-for-updates
    if: needs.check-for-updates.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout docling repository
        uses: actions/checkout@v4
        with:
          repository: docling-project/docling
          ref: ${{ needs.check-for-updates.outputs.latest_tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.check-for-updates.outputs.latest_tag }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate summary
        run: |
          echo "## 🐳 Docker Image Built Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ needs.check-for-updates.outputs.latest_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm -v \$(pwd):/workspace ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.check-for-updates.outputs.latest_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  notify-skip:
    needs: check-for-updates
    if: needs.check-for-updates.outputs.should_build == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Generate skip summary
        run: |
          echo "## ⏭️ Build Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** Image for version \`${{ needs.check-for-updates.outputs.latest_tag }}\` already exists" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To force a rebuild, manually trigger this workflow with the 'Force build' option enabled." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Existing image:** \`${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.check-for-updates.outputs.latest_tag }}\`" >> $GITHUB_STEP_SUMMARY